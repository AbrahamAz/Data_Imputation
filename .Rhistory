setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
map <- leaflet() %>%
addCircles(data = gps_known.sf, stroke = F, fill= T, color = "black", fillOpacity = 0.75,
radius = 1000) %>%
addCircles(data = from_To.cleaned.sf, stroke = F, fill= T, color = "#ee5859", fillOpacity = 0.75,
radius = 1000) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addMeasure(primaryLengthUnit = "meters")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
library(ggplot2)
library(tidyverse)
library(shiny)
data <- readxl::read_xlsx("data/unknown_LPD.xlsx") %>%
mutate(Percentage = round(Percentage, 3))
ggplot(data, aes(x=Month, y=Percentage, group=Group, label=Percentage))+
geom_line()+
geom_point()+
geom_text(nudge_y = 2)
library(leaflet)
library(sf)
data <- readxl::read_excel("data/Consolidated_Datasets.xlsx")
data <- data %>%
select(-c(`End of data coverage period`)) %>%
mutate(`Start of data coverage peirod` = case_when(
`Start of data coverage peirod` %in% c("2020-12-01","2020-12-16") ~ "December 2020",
`Start of data coverage peirod` %in% c("2020-11-01","2020-11-16") ~ "November 2020",
`Start of data coverage peirod` %in% c("2020-10-01","2020-10-16") ~ "October 2020",
`Start of data coverage peirod` %in% c("2020-09-01","2020-09-16") ~ "September 2020",
`Start of data coverage peirod` %in% c("2021-01-01","2021-01-16") ~ "January 2021",
`Start of data coverage peirod` %in% c("2021-02-01","2021-02-16") ~ "February 2021",
`Start of data coverage peirod` %in% c("2021-03-01","2021-03-15","2021-03-16") ~ "March 2021",
`Start of data coverage peirod` %in% c("2021-04-01","2021-04-16") ~ "April 2021",
`Start of data coverage peirod` %in% c("2021-05-01","2021-05-16") ~ "May 2021",
`Start of data coverage peirod` %in% c("2021-06-01","2021-06-15","2021-06-16") ~ "June 2021",
`Start of data coverage peirod` %in% c("2021-07-01","2021-07-15","2021-07-16") ~ "July 2021",
`Start of data coverage peirod` %in% c("2021-08-01","2021-08-15","2021-08-16","2021-08-19") ~ "August 2021",
`Start of data coverage peirod` %in% c("2021-09-01","2021-09-15","2021-09-16") ~ "September 2021",
`Start of data coverage peirod` %in% c("2021-10-01","2021-10-15","2021-10-16") ~ "October 2021",
`Start of data coverage peirod` %in% c("2021-11-01","2021-11-15","2021-11-16") ~ "November 2021",
`Start of data coverage peirod` %in% c("2021-12-01","2021-12-16") ~ "December 2021",
`Start of data coverage peirod` == "2022-01-01" ~ "January 2022"
)) %>%
filter(!str_detect(`Closest p-code`,"CP") & !str_starts(`Closest p-code`,"RE"))
data <- data %>%
select(`Start of data coverage peirod`,`Closest p-code`,`Number of IDP HH arrivals`, `Subdistrict of last departure 1`, `Number of IDP HHs arrived from subdistrict 1`,
`Subdistrict of last departure 2`, `Number of IDP HHs arrived from subdistrict 2`,
`Subdistrict of last departure 3`, `Number of IDP HHs arrived from subdistrict 3`) %>%
rename("To_Com" = `Closest p-code`,
"From_Sub"=`Subdistrict of last departure 1`) %>%
mutate(`Number of IDP HHs arrived from subdistrict 1` = ifelse(`Number of IDP HHs arrived from subdistrict 1` == "Not sure", NA,`Number of IDP HHs arrived from subdistrict 1`),
`Number of IDP HHs arrived from subdistrict 2` = ifelse(`Number of IDP HHs arrived from subdistrict 2` == "Not sure", NA,`Number of IDP HHs arrived from subdistrict 2`),
`Number of IDP HHs arrived from subdistrict 3` = ifelse(`Number of IDP HHs arrived from subdistrict 3` == "Not sure", NA,`Number of IDP HHs arrived from subdistrict 3`)) %>%
filter(`Number of IDP HH arrivals` != 0)
data$`Number of IDP HHs arrived from subdistrict 1` <- as.numeric(data$`Number of IDP HHs arrived from subdistrict 1`)
data$`Number of IDP HHs arrived from subdistrict 2` <- as.numeric(data$`Number of IDP HHs arrived from subdistrict 2`)
data$`Number of IDP HHs arrived from subdistrict 3` <- as.numeric(data$`Number of IDP HHs arrived from subdistrict 3`)
gps_na_dec2020 <- data %>%
filter(`Start of data coverage peirod` == "December 2020")
from_To <- gps_na_dec2020 %>%
mutate(clean = ifelse(is.na(`Number of IDP HHs arrived from subdistrict 1`) & is.na(`Number of IDP HHs arrived from subdistrict 3`) & is.na(`Number of IDP HHs arrived from subdistrict 2`),T,
ifelse(is.na(`Number of IDP HHs arrived from subdistrict 3`) & is.na(`Number of IDP HHs arrived from subdistrict 2`) &
`Number of IDP HH arrivals` != `Number of IDP HHs arrived from subdistrict 1`,T,
ifelse(is.na(`Number of IDP HHs arrived from subdistrict 3`) & sum(`Number of IDP HHs arrived from subdistrict 1`,`Number of IDP HHs arrived from subdistrict 2`) != `Number of IDP HH arrivals`,T,F)))) %>%
filter(!is.na(clean))
from_To.cleaned <- from_To %>%
filter(clean == T) %>%
gather(col, value, From_Sub:`Number of IDP HHs arrived from subdistrict 3`) %>%
mutate(col = ifelse(col == "Subdistrict of last departure 2", "From_Sub",
ifelse(col == "Subdistrict of last departure 3","From_Sub",
ifelse(col=="Number of IDP HHs arrived from subdistrict 1", "HH_arrival",
ifelse(col=="Number of IDP HHs arrived from subdistrict 2", "HH_arrival",
ifelse(col=="Number of IDP HHs arrived from subdistrict 3", "HH_arrival",col)))))) %>%
pivot_wider(names_from = col,
values_from = value) %>%  unnest() %>%
select(From_Sub, To_Com, HH_arrival) %>%
filter(From_Sub == "Not sure") %>%
group_by(To_Com) %>%
summarise(Sub_NA = n())
locations <- read.csv("data/ocha_locations.csv")
locations <- locations %>%
rename(lat=Latitude_y, long=Longitude_x, community_pcode=admin4Pcod) %>%
select(lat, long, community_pcode) %>%
rename(To_Com = community_pcode) %>%
distinct(To_Com, .keep_all = TRUE)
from_To.cleaned <- left_join(from_To.cleaned, locations, by="To_Com")
gps_known <- gps_na_dec2020 %>%
select(To_Com)
gps_known <- gps_known[!duplicated(gps_known$To_Com),]
gps_known <- gps_known %>%
filter(!(To_Com %in% from_To.cleaned$To_Com)) %>%
left_join(locations, by="To_Com")
from_To.cleaned.sf <- st_as_sf(x = from_To.cleaned, coords = c("long", "lat"), crs = 4326)
gps_known.sf <- st_as_sf(x = gps_known, coords = c("long", "lat"), crs = 4326)
map <- leaflet() %>%
addCircles(data = gps_known.sf, stroke = F, fill= T, color = "black", fillOpacity = 0.75,
radius = 1000) %>%
addCircles(data = from_To.cleaned.sf, stroke = F, fill= T, color = "#ee5859", fillOpacity = 0.75,
radius = 1000) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addMeasure(primaryLengthUnit = "meters")
map
mapview::mapshot(map, file = "Mymap.pdf")
mapview::mapshot(map, file = "Mymap.pdf")
mapview::mapshot(map, file = "Mymap.png")
mapview::mapshot(map,file = paste0(getwd(), "/Mymap.png"))
mapview::mapshot(map,file = paste0(getwd(), "/map.pdf"))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
library(ggplot2)
library(tidyverse)
library(shiny)
data <- readxl::read_xlsx("data/unknown_LPD.xlsx") %>%
mutate(Percentage = round(Percentage, 3))
ggplot(data, aes(x=Month, y=Percentage, group=Group, label=Percentage))+
geom_line()+
geom_point()+
geom_text(nudge_y = 2)
library(readxl)
plot1 <- read_excel("output/plot1.xlsx")
ggplot(plot1, aes(x=Approach, y=Margin_Error, label = Margin_Error), width= 50)+
geom_col(fill = "#ee5859", width = 0.2,position = position_dodge(width=0.1), aes(ylab = Margin_Error)) +
theme(axis.text.x = element_text(vjust = 0.5,angle = 25)) +
geom_text(nudge_y = 0.005)
plot2 <- read_excel("output/plot2.xlsx")
ggplot(plot2, aes(x=Approach, y=Margin_Error, label = Margin_Error), width= 50)+
geom_col(fill = "#ee5859", width = 0.2,position = position_dodge(width=0.1), aes(ylab = Margin_Error)) +
theme(axis.text.x = element_text(vjust = 0.5,angle = 25)) +
geom_text(nudge_y = 0.005)
plot3 <- read_excel("output/plot3.xlsx")
ggplot(plot3, aes(x=Approach, y=Margin_Error, label = Margin_Error), width= 50)+
geom_col(fill = "#ee5859", width = 0.2,position = position_dodge(width=0.1), aes(ylab = Margin_Error)) +
theme(axis.text.x = element_text(vjust = 0.5,angle = 25)) +
geom_text(nudge_y = 0.005)
plot4 <- read_excel("output/plot4.xlsx")
ggplot(plot4, aes(x=Approach, y=Margin_Error, label = Margin_Error), width= 50)+
geom_col(fill = "#ee5859", width = 0.2,position = position_dodge(width=0.1), aes(ylab = Margin_Error)) +
theme(axis.text.x = element_text(vjust = 0.5,angle = 25)) +
geom_text(nudge_y = 0.005)
library(leaflet)
library(sf)
data <- readxl::read_excel("data/Consolidated_Datasets.xlsx")
data <- data %>%
select(-c(`End of data coverage period`)) %>%
mutate(`Start of data coverage peirod` = case_when(
`Start of data coverage peirod` %in% c("2020-12-01","2020-12-16") ~ "December 2020",
`Start of data coverage peirod` %in% c("2020-11-01","2020-11-16") ~ "November 2020",
`Start of data coverage peirod` %in% c("2020-10-01","2020-10-16") ~ "October 2020",
`Start of data coverage peirod` %in% c("2020-09-01","2020-09-16") ~ "September 2020",
`Start of data coverage peirod` %in% c("2021-01-01","2021-01-16") ~ "January 2021",
`Start of data coverage peirod` %in% c("2021-02-01","2021-02-16") ~ "February 2021",
`Start of data coverage peirod` %in% c("2021-03-01","2021-03-15","2021-03-16") ~ "March 2021",
`Start of data coverage peirod` %in% c("2021-04-01","2021-04-16") ~ "April 2021",
`Start of data coverage peirod` %in% c("2021-05-01","2021-05-16") ~ "May 2021",
`Start of data coverage peirod` %in% c("2021-06-01","2021-06-15","2021-06-16") ~ "June 2021",
`Start of data coverage peirod` %in% c("2021-07-01","2021-07-15","2021-07-16") ~ "July 2021",
`Start of data coverage peirod` %in% c("2021-08-01","2021-08-15","2021-08-16","2021-08-19") ~ "August 2021",
`Start of data coverage peirod` %in% c("2021-09-01","2021-09-15","2021-09-16") ~ "September 2021",
`Start of data coverage peirod` %in% c("2021-10-01","2021-10-15","2021-10-16") ~ "October 2021",
`Start of data coverage peirod` %in% c("2021-11-01","2021-11-15","2021-11-16") ~ "November 2021",
`Start of data coverage peirod` %in% c("2021-12-01","2021-12-16") ~ "December 2021",
`Start of data coverage peirod` == "2022-01-01" ~ "January 2022"
)) %>%
filter(!str_detect(`Closest p-code`,"CP") & !str_starts(`Closest p-code`,"RE"))
data <- data %>%
select(`Start of data coverage peirod`,`Closest p-code`,`Number of IDP HH arrivals`, `Subdistrict of last departure 1`, `Number of IDP HHs arrived from subdistrict 1`,
`Subdistrict of last departure 2`, `Number of IDP HHs arrived from subdistrict 2`,
`Subdistrict of last departure 3`, `Number of IDP HHs arrived from subdistrict 3`) %>%
rename("To_Com" = `Closest p-code`,
"From_Sub"=`Subdistrict of last departure 1`) %>%
mutate(`Number of IDP HHs arrived from subdistrict 1` = ifelse(`Number of IDP HHs arrived from subdistrict 1` == "Not sure", NA,`Number of IDP HHs arrived from subdistrict 1`),
`Number of IDP HHs arrived from subdistrict 2` = ifelse(`Number of IDP HHs arrived from subdistrict 2` == "Not sure", NA,`Number of IDP HHs arrived from subdistrict 2`),
`Number of IDP HHs arrived from subdistrict 3` = ifelse(`Number of IDP HHs arrived from subdistrict 3` == "Not sure", NA,`Number of IDP HHs arrived from subdistrict 3`)) %>%
filter(`Number of IDP HH arrivals` != 0)
data$`Number of IDP HHs arrived from subdistrict 1` <- as.numeric(data$`Number of IDP HHs arrived from subdistrict 1`)
data$`Number of IDP HHs arrived from subdistrict 2` <- as.numeric(data$`Number of IDP HHs arrived from subdistrict 2`)
data$`Number of IDP HHs arrived from subdistrict 3` <- as.numeric(data$`Number of IDP HHs arrived from subdistrict 3`)
gps_na_dec2020 <- data %>%
filter(`Start of data coverage peirod` == "December 2020")
from_To <- gps_na_dec2020 %>%
mutate(clean = ifelse(is.na(`Number of IDP HHs arrived from subdistrict 1`) & is.na(`Number of IDP HHs arrived from subdistrict 3`) & is.na(`Number of IDP HHs arrived from subdistrict 2`),T,
ifelse(is.na(`Number of IDP HHs arrived from subdistrict 3`) & is.na(`Number of IDP HHs arrived from subdistrict 2`) &
`Number of IDP HH arrivals` != `Number of IDP HHs arrived from subdistrict 1`,T,
ifelse(is.na(`Number of IDP HHs arrived from subdistrict 3`) & sum(`Number of IDP HHs arrived from subdistrict 1`,`Number of IDP HHs arrived from subdistrict 2`) != `Number of IDP HH arrivals`,T,F)))) %>%
filter(!is.na(clean))
from_To.cleaned <- from_To %>%
filter(clean == T) %>%
gather(col, value, From_Sub:`Number of IDP HHs arrived from subdistrict 3`) %>%
mutate(col = ifelse(col == "Subdistrict of last departure 2", "From_Sub",
ifelse(col == "Subdistrict of last departure 3","From_Sub",
ifelse(col=="Number of IDP HHs arrived from subdistrict 1", "HH_arrival",
ifelse(col=="Number of IDP HHs arrived from subdistrict 2", "HH_arrival",
ifelse(col=="Number of IDP HHs arrived from subdistrict 3", "HH_arrival",col)))))) %>%
pivot_wider(names_from = col,
values_from = value) %>%  unnest() %>%
select(From_Sub, To_Com, HH_arrival) %>%
filter(From_Sub == "Not sure") %>%
group_by(To_Com) %>%
summarise(Sub_NA = n())
locations <- read.csv("data/ocha_locations.csv")
locations <- locations %>%
rename(lat=Latitude_y, long=Longitude_x, community_pcode=admin4Pcod) %>%
select(lat, long, community_pcode) %>%
rename(To_Com = community_pcode) %>%
distinct(To_Com, .keep_all = TRUE)
from_To.cleaned <- left_join(from_To.cleaned, locations, by="To_Com")
gps_known <- gps_na_dec2020 %>%
select(To_Com)
gps_known <- gps_known[!duplicated(gps_known$To_Com),]
gps_known <- gps_known %>%
filter(!(To_Com %in% from_To.cleaned$To_Com)) %>%
left_join(locations, by="To_Com")
from_To.cleaned.sf <- st_as_sf(x = from_To.cleaned, coords = c("long", "lat"), crs = 4326)
gps_known.sf <- st_as_sf(x = gps_known, coords = c("long", "lat"), crs = 4326)
map <- leaflet() %>%
addCircles(data = gps_known.sf, stroke = F, fill= T, color = "black", fillOpacity = 0.75,
radius = 1000) %>%
addCircles(data = from_To.cleaned.sf, stroke = F, fill= T, color = "#ee5859", fillOpacity = 0.75,
radius = 1000) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addMeasure(primaryLengthUnit = "meters")
mapview::mapshot(map,file = "map.pdf")
inputPanel(
selectInput("date", label = "Select Month", choices = unique(data$`Start of data coverage peirod`), selected = "September 2021")
)
filteredData <- reactive({
req(input$date)
data[data$`Start of data coverage peirod` == input$date,]
})
observe({
if(nrow(data) > 0){
from_To.inter <- filteredData() %>%
mutate(clean = ifelse(is.na(`Number of IDP HHs arrived from subdistrict 1`) & is.na(`Number of IDP HHs arrived from subdistrict 3`) & is.na(`Number of IDP HHs arrived from subdistrict 2`),T,
ifelse(is.na(`Number of IDP HHs arrived from subdistrict 3`) & is.na(`Number of IDP HHs arrived from subdistrict 2`) &
`Number of IDP HH arrivals` != `Number of IDP HHs arrived from subdistrict 1`,T,
ifelse(is.na(`Number of IDP HHs arrived from subdistrict 3`) & sum(`Number of IDP HHs arrived from subdistrict 1`,`Number of IDP HHs arrived from subdistrict 2`) != `Number of IDP HH arrivals`,T,F)))) %>%
filter(!is.na(clean))
from_To.cleaned.inter <- from_To.inter %>%
filter(clean == T) %>%
gather(col, value, From_Sub:`Number of IDP HHs arrived from subdistrict 3`) %>%
mutate(col = ifelse(col == "Subdistrict of last departure 2", "From_Sub",
ifelse(col == "Subdistrict of last departure 3","From_Sub",
ifelse(col=="Number of IDP HHs arrived from subdistrict 1", "HH_arrival",
ifelse(col=="Number of IDP HHs arrived from subdistrict 2", "HH_arrival",
ifelse(col=="Number of IDP HHs arrived from subdistrict 3", "HH_arrival",col)))))) %>%
pivot_wider(names_from = col,
values_from = value) %>%  unnest() %>%
select(From_Sub, To_Com, HH_arrival) %>%
filter(From_Sub == "Not sure") %>%
group_by(To_Com) %>%
summarise(Sub_NA = n())
from_To.cleaned.inter <- left_join(from_To.cleaned.inter, locations, by="To_Com")
gps_known <- filteredData() %>%
select(To_Com)
gps_known <- gps_known[!duplicated(gps_known$To_Com),]
gps_known <- gps_known %>%
filter(!(To_Com %in% from_To.cleaned$To_Com)) %>%
left_join(locations, by="To_Com")
from_To.cleaned.sf <- st_as_sf(x = from_To.cleaned.inter, coords = c("long", "lat"), crs = 4326)
gps_known.sf <- st_as_sf(x = gps_known, coords = c("long", "lat"), crs = 4326)
output$map <- renderLeaflet({
leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
addCircles(data = gps_known.sf, stroke = F, fill= T, color = "black", fillOpacity = 0.75,
radius = 1000) %>%
addCircles(data = from_To.cleaned.sf, stroke = F, fill= T, color = "#ee5859", fillOpacity = 0.75,
radius = 1000) %>%
addProviderTiles("OpenStreetMap.Mapnik") %>%
addMeasure(primaryLengthUnit = "meters")
})
}
})
leafletOutput("map", width = "100%",height = "700px")
mapview::mapshot(map, "map.pdf")
mapview::mapshot(map, "map.pdf")
--pdf-engine
Sys.which("pdflatex")
